version: "3"

services:
  api:
    container_name: api
    build:
      context: .
      dockerfile: ./.docker/api/Dockerfile
    image: api:${API_VERSION:-latest}
    ports:
      - 8000:8000
    restart: always
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./api:/app
      - venv:/app/.venv
    environment:
      API_RELOAD: true
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_DB_HOST: db
      API_DB_PORT: 5432
      API_DB_USER: postgres_user
      API_DB_PASS: postgres_password
      API_DB_BASE: app

  web:
    container_name: web
    build:
      context: .
      dockerfile: ./.docker/web/Dockerfile
    ports:
      - 3000:3000
    volumes:
      - ./web:/app
      - next_build:/app/.next
      - node_modules:/app/node_modules
    restart: always
    tty: true
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - api

  db:
    container_name: database
    image: postgres:16-bullseye
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: app
      encoding: utf8
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U postgres_user -d app
      interval: 2s
      timeout: 3s
      retries: 40

  migrator:
    container_name: migrator
    image: api:${API_VERSION:-latest}
    restart: on-failure
    command: /app/.venv/bin/python -m alembic upgrade head
    environment:
      API_DB_HOST: db
      API_DB_PORT: 5432
      API_DB_USER: postgres_user
      API_DB_PASS: postgres_password
      API_DB_BASE: app
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started

volumes:
  venv:
  next_build:
  node_modules:
  db_data:
